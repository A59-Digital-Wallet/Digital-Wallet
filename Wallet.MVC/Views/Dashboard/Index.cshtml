@using System.Globalization
@model HomeViewModel
@{
    Layout = "_Layout";
}
@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <!-- Custom Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <!-- Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- FontAwesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Custom CSS for Gradient and Animations -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
        }

        .btn-primary {
            background-color: #4f46e5;
            color: white;
            transition: background-color 0.3s ease;
        }

            .btn-primary:hover {
                background-color: #4338ca;
            }

        .btn-secondary {
            background-color: #22c55e;
            color: white;
            transition: background-color 0.3s ease;
        }

            .btn-secondary:hover {
                background-color: #16a34a;
            }

        .card {
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
            }

        .icon {
            width: 24px;
            height: 24px;
        }

        .btn-custom {
            border-radius: 25px;
            font-weight: bold;
            padding: 8px 16px;
            background-color: #4f46e5;
            color: white;
            display: flex;
            align-items: center;
            transition: background-color 0.3s ease;
            font-size: 16px;
        }

            .btn-custom:hover {
                background-color: #4338ca;
                transform: translateY(-3px);
            }

        .btn-custom-icon {
            font-size: 18px; /* Slightly larger than the text */
            margin-right: 6px;
        }

        /* Additional Button Colors */
        .btn-primary {
            background-color: #4f46e5;
        }

        .btn-secondary {
            background-color: #22c55e;
        }

        .btn-danger {
            background-color: #ef4444;
        }

            .btn-danger:hover {
                background-color: #dc2626;
            }

        .btn-custom-large {
            border-radius: 25px;
            font-weight: bold;
            padding: 16px 24px;
            background-color: #4f46e5;
            color: white;
            display: flex;
            align-items: center;
            transition: background-color 0.3s ease;
            font-size: 18px;
            justify-content: center;
            width: 100%;
        }

            .btn-custom-large:hover {
                background-color: #4338ca;
                transform: translateY(-3px);
            }

        .btn-custom-small {
            border-radius: 20px;
            font-weight: bold;
            padding: 10px 16px;
            background-color: #4f46e5;
            color: white;
            display: flex;
            align-items: center;
            transition: background-color 0.3s ease;
            font-size: 16px;
            justify-content: center;
            width: 100%;
        }

            .btn-custom-small:hover {
                background-color: #4338ca;
                transform: translateY(-3px);
            }

        .btn-custom-icon {
            font-size: 20px;
            margin-right: 8px;
        }

    </style>
</head>

<body class="bg-gray-100 font-sans">

    <div class="container mx-auto mt-8">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="flex flex-wrap">
                <!-- Sidebar -->
                <div class="w-full lg:w-1/4 p-4">
                    <div class="card p-6">
                        <div class="text-center mb-6">
                            <img src="@Model.profilePicture" alt="User Image" class="mx-auto rounded-full mb-3 border-4 border-indigo-500">
                            <h5 class="font-bold text-xl text-gray-800">@User.Identity.Name</h5>
                            <p class="text-gray-500">@User.Identity.Name's Dashboard</p>
                            <a class="text-indigo-600 hover:underline" href="@Url.Action("Profile", "User")">Profile</a>
                        </div>
                        <!-- Cards Section -->
                        <div class="mt-8">
                            <div class="flex justify-between items-center mb-4">
                                <h5 class="font-bold text-lg text-gray-800">Cards</h5>
                                <a href="@Url.Action("ShowAll", "Card")" class="text-indigo-600 text-sm hover:underline">Show All</a>
                            </div>
                            @if (Model.Card != null)
                            {
                                string cardNetworkLink = "";
                                var firstCard = Model.Card;
                                DateTime date = DateTime.Parse(firstCard.ExpiryDate.ToString(), new CultureInfo("bg-BG"));
                                string formattedDate = date.ToString("MM/yy", CultureInfo.InvariantCulture);
                                switch (firstCard.CardNetwork)
                                {
                                    case Wallet.Data.Models.Enums.CardNetwork.Visa:
                                        cardNetworkLink = Url.Content("~/images/visa.png");
                                        break;
                                    case Wallet.Data.Models.Enums.CardNetwork.MasterCard:
                                        cardNetworkLink = Url.Content("~/images/mastercard.png");
                                        break;
                                    case Wallet.Data.Models.Enums.CardNetwork.Discover:
                                        cardNetworkLink = Url.Content("~/images/discover.png");
                                        break;
                                    case Wallet.Data.Models.Enums.CardNetwork.AmericanExpress:
                                        cardNetworkLink = Url.Content("~/images/amex.png");
                                        break;
                                        // Add more cases as necessary
                                }
                                <div class="flex flex-col justify-end px-6 py-10 text-white rounded-3xl gap-4 bg-gradient-to-r from-purple-500 to-pink-500">
                                    <p class="text-2xl font-medium">@firstCard.CardNumber</p>
                                    <div class="flex justify-between items-end gap-4">
                                        <p class="text-lg font-medium flex-1">@firstCard.CardHolderName</p>
                                        <div class="text-right">
                                            <p class="text-xs">Valid Date</p>
                                            <p class="text-lg font-semibold">@formattedDate</p>
                                        </div>
                                        <div class="w-12">
                                            <img src="@cardNetworkLink" alt="Card Network Logo" class="w-full">
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <p class="text-gray-600">No cards available. <a href="@Url.Action("AddCard", "Card")" class="text-indigo-600 hover:underline">Add a card</a>.</p>
                            }
                            <div class="flex justify-between items-center mt-6 space-x-4">
                                <!-- Add Card Button -->
                                <a href="@Url.Action("AddCard", "Card")" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full transition duration-300 shadow-md">
                                    Add Card
                                </a>
                                <!-- Overdraft Details -->
                                <a href="@Url.Action("Overdraft", "Wallet", new{ walletId = ViewBag.SelectedWallet.Id })" type="button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full transition duration-300 shadow-md">
                                    Overdraft
                                </a>
                            </div>


                        </div>
                    </div>
                </div>
      
                <!-- Main Content -->
                <div class="w-full lg:w-3/4 p-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Welcome Message, Balance, Contacts, Transaction History -->
                        <div>
                            <div class="bg-green-50 text-green-800 p-4 rounded-lg mb-4">
                                Welcome back, @User.Identity.Name!
                            </div>
                            <div class="card p-6 mb-6">
                                <!-- Balance and Dropdown Row -->
                                <div class="flex flex-wrap lg:flex-nowrap justify-between items-center mb-4 space-y-4 lg:space-y-0">
                                    <!-- Balance Display on the Left -->
                                    <div class="flex-1">
                                        <div class="balance text-4xl font-bold @(ViewBag.SelectedWallet.Balance < 0 ? "text-red-500" : "text-gray-800")">
                                            @ViewBag.SelectedWallet.Balance.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(ViewBag.SelectedWallet.CurrencyCulture))
                                        </div>
                                    </div>

                                    <!-- Dropdown for Wallet Selection on the Right -->
                                    <div class="flex-shrink-0">
                                        <form asp-action="Index" method="get" class="flex items-center">
                                            <select name="walletId" onchange="this.form.submit()" class="form-select border border-gray-300 rounded-lg shadow-sm cursor-pointer p-2 bg-white text-gray-700 hover:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                                @foreach (var wallet in Model.Wallets)
                                                {
                                                    <option value="@wallet.Id" selected="@(wallet.Id == ViewBag.SelectedWallet.Id ? "selected" : null)">
                                                        @wallet.Name (@wallet.Currency)
                                                    </option>
                                                }
                                            </select>
                                        </form>
                                    </div>
                                </div>

                                <!-- Transaction Action Buttons Row -->
                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 mt-4">
                                    <!-- Deposit and Withdraw Buttons -->
                                    <div class="p-2">
                                        <div class="flex flex-col space-y-4 h-full">
                                            <a href="@Url.Action("SelectWalletAndCard", "Transaction", new { type = "Deposit" })" class="btn-custom-small flex-1">
                                                <i class="fas fa-money-bill-wave btn-custom-icon"></i> Deposit
                                            </a>
                                            <a href="@Url.Action("SelectWalletAndCard", "Transaction", new { type = "Withdraw" })" class="btn-custom-small flex-1">
                                                <i class="fas fa-wallet btn-custom-icon"></i> Withdraw
                                            </a>
                                        </div>
                                    </div>

                                    <!-- Wallet Transfer and Create Wallet Buttons -->
                                    <div class="p-2">
                                        <div class="flex flex-col space-y-4 h-full">
                                            <a href="@Url.Action("TransferBetweenWallets", "Transaction")" class="btn-custom-small flex-1">
                                                <i class="fas fa-exchange-alt btn-custom-icon"></i> Wallet Transfer
                                            </a>
                                            <a href="@Url.Action("Create", "Wallet")" class="btn-custom-small flex-1">
                                                <i class="fas fa-plus-circle btn-custom-icon"></i> Create Wallet
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <!-- Actions Card -->
                            <div class="card p-6 mb-6">
                                <h5 class="font-bold text-lg text-gray-800 mb-4">Actions</h5>
                                <ul>
                                    @if (Model.ReceivedRequests != null && Model.ReceivedRequests.Any())
                                    {
                                        @foreach (var request in Model.ReceivedRequests)
                                        {
                                            <li class="border-b border-gray-200 py-2 flex justify-between items-center">
                                                <div>
                                                    <span class="font-semibold text-gray-700">@request.Description</span>
                                                    <span class="font-semibold text-gray-700">@request.Description</span>
                                                    requested
                                                    <span class="font-semibold text-indigo-600">@request.Amount @request.RequestedCurrency</span>
                                                </div>
                                                <div class="space-x-2">
                                                    <form asp-action="ApproveRequest" asp-controller="MoneyRequest" method="post" class="inline">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="requestId" value="@request.Id" />
                                                        <button type="submit" class="btn-secondary px-3 py-1 rounded-full">Approve</button>
                                                    </form>
                                                    <form asp-action="RejectRequest" asp-controller="MoneyRequest" method="post" class="inline">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="requestId" value="@request.Id" />
                                                        <button type="submit" class="bg-red-500 text-white px-3 py-1 rounded-full shadow hover:bg-red-600 transition">Reject</button>
                                                    </form>
                                                </div>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li class="text-gray-500">No pending actions.</li>
                                    }
                                </ul>
                            </div>

                            <!-- Recent Contacts & Invite -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <div class="card p-6 flex flex-col justify-between min-h-full">
                                        <h5 class="font-bold text-lg text-gray-800 mb-4">
                                            <a href="@Url.Action("Index", "Contacts")" class="text-indigo-600 hover:underline">Recent Contacts</a>
                                        </h5>
                                        <div class="flex flex-col items-start space-y-2" id="recentContacts" style="margin-top: -10px;">
                                            @await Html.PartialAsync("~/Views/Contacts/_RecentContacts.cshtml", Model.Contacts)
                                        </div>

                                    </div>
                                </div>

                                <!-- Categories Section -->
                                <div>
                                    <div class="card p-6 flex flex-col justify-between min-h-full">
                                        <div>
                                            <h5 class="font-bold text-lg text-gray-800 mb-4">
                                                <a href="@Url.Action("Index", "Category")" class="text-indigo-600 hover:underline">Categories</a>
                                            </h5>
                                            <ul class="space-y-2">
                                                @foreach (var category in Model.Categories)
                                                {
                                                    <li>
                                                        <a href="@Url.Action("CategoryTransactions", "Category", new { categoryId = category.Id })" class="text-gray-700 hover:text-indigo-600">@category.Name</a>
                                                    </li>
                                                }
                                                @if (!Model.Categories.Any())
                                                {
                                                    <li class="text-gray-500">No categories available.</li>
                                                }
                                            </ul>
                                        </div>
                                        <div class="mt-4">
                                            <a href="@Url.Action("CreateCategory", "Category")" class="btn-secondary py-2 px-4 rounded-full font-bold shadow hover:bg-green-600 transition">
                                                Add Category
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ViewBag.SelectedWallet.Type != "Joint")
                            {
                                <div class="card p-6 mt-6">
                                    <h5 class="font-bold text-lg text-gray-800 mb-4">
                                        <a href="@Url.Action("TransactionHistory", "Transaction")" class="text-indigo-600 hover:underline">Transaction History</a>
                                    </h5>
                                    <div>
                                        @foreach (var transaction in Model.Transactions)
                                        {
                                            <div class="flex justify-between items-center py-3 border-b last:border-0">
                                                <div>
                                                    <p class="font-semibold text-gray-800">@transaction.Description</p>
                                                    <small class="text-gray-500">@transaction.Date.ToString("ddd, dd MMMM yyyy - h:mm tt")</small>
                                                </div>
                                                <div class="text-right">
                                                    <p class="@(transaction.Direction == "Incoming" ? "text-green-500" : "text-red-500") font-bold">
                                                        @(transaction.Direction == "Incoming" ? "+" : "-")
                                                        @if (transaction.Direction == "Incoming")
                                                        {
                                                            @transaction.Amount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(transaction.CurrencyCultureSent))
                                                        }
                                                        else
                                                        {
                                                            @transaction.OriginalAmount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(transaction.CurrencyCulture))
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                        <div class="text-center mt-4">
                                            <a href="@Url.Action("TransactionHistory", "Transaction")" class="border border-indigo-600 text-indigo-600 rounded-full font-bold py-2 px-4 hover:bg-indigo-100 transition">View All Transactions</a>
                                        </div>
                                    </div>
                                </div>
                            }
                            <!-- Transaction History -->




                        </div>

                        <!-- Wallet Statistics Section -->
                        <div>
                            @if (ViewBag.SelectedWallet.Type != "Joint")
                            {
                                <div class="card p-6">
                                    <div class="mb-6">
                                        <h5 class="font-bold text-lg text-gray-800">Wallet Statistics</h5>
                                        <p class="text-gray-600">Total spent this month: @Model.TotalSpentThisMonth.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(ViewBag.SelectedWallet.CurrencyCulture))</p>
                                    </div>
                                    <!-- Bar Chart for Weekly Spending -->
                                    <canvas id="weeklySpendingChart" width="400" height="200"></canvas>
                                </div>

                                <div class="card p-6 mt-6">
                                    <h5 class="font-bold text-lg text-gray-800 mb-4">Monthly Spending by Category</h5>
                                    <canvas id="categorySpendingChart" width="400" height="200"></canvas>
                                </div>

                                <div class="card p-6 mt-6">
                                    <h5 class="font-bold text-lg text-gray-800 mb-4">Wallet Balance Over Time</h5>

                                    <!-- Time Interval Buttons -->
                                    <div class="flex justify-around mb-4">
                                        <button onclick="updateChart('daily')" class="btn-primary rounded-full py-2 px-4 font-bold hover:bg-indigo-700 transition">Daily</button>
                                        <button onclick="updateChart('weekly')" class="btn-primary rounded-full py-2 px-4 font-bold hover:bg-indigo-700 transition">Weekly</button>
                                        <button onclick="updateChart('monthly')" class="btn-primary rounded-full py-2 px-4 font-bold hover:bg-indigo-700 transition">Monthly</button>
                                        <button onclick="updateChart('yearly')" class="btn-primary rounded-full py-2 px-4 font-bold hover:bg-indigo-700 transition">Yearly</button>
                                    </div>

                                    <canvas id="balanceGrowthChart" width="400" height="200"></canvas>
                                </div>
                            }
                            else
                            {
                                <!-- Transaction History for Joint Wallet -->
                                <div class="card p-6 mt-6">
                                    <h5 class="font-bold text-lg text-gray-800 mb-4">Transaction History</h5>
                                    <div>
                                        @foreach (var transaction in Model.Transactions)
                                        {
                                            <div class="flex justify-between items-center py-3 border-b last:border-0">
                                                <div>
                                                    <p class="font-semibold text-gray-800">@transaction.Description</p>
                                                    <small class="text-gray-500">@transaction.Date.ToString("ddd, dd MMMM yyyy - h:mm tt")</small>
                                                </div>
                                                <div class="text-right">
                                                    <p class="@(transaction.Direction == "Incoming" ? "text-green-500" : "text-red-500") font-bold">
                                                        @(transaction.Direction == "Incoming" ? "+" : "-")
                                                        @if (transaction.Direction == "Incoming")
                                                        {
                                                            @transaction.Amount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(transaction.CurrencyCultureSent))
                                                        }
                                                        else
                                                        {
                                                            @transaction.OriginalAmount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(transaction.CurrencyCulture))
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                        <div class="text-center mt-4">
                                            <a href="@Url.Action("TransactionHistory", "Transaction")" class="border border-indigo-600 text-indigo-600 rounded-full font-bold py-2 px-4 hover:bg-indigo-100 transition">View All Transactions</a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Logout Button -->

                </div>
            </div>
        }
        else
        {
            <div class="text-center mt-8">
                <h2 class="text-2xl font-bold mb-4">Please log in to access your dashboard.</h2>
                <a href="@Url.Action("Login", "Account")" class="btn-primary rounded-full font-bold py-2 px-4 hover:bg-indigo-700 transition">Log In</a>
                <a href="@Url.Action("Register", "Account")" class="border border-indigo-600 text-indigo-600 rounded-full font-bold py-2 px-4 ml-2 hover:bg-indigo-100 transition">Register</a>
            </div>
        }
    </div>

    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        var weeklySpendingData = {
            labels: @Html.Raw(Json.Serialize(Model.WeeklySpendingLabels)),
            datasets: [{
                label: 'Weekly Spending',
                data: @Html.Raw(Json.Serialize(Model.WeeklySpendingAmounts)),
                backgroundColor: 'rgba(124, 58, 237, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        };

        var config = {
            type: 'bar',
            data: weeklySpendingData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Weekly Spending'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            },
        };

        var ctx = document.getElementById('weeklySpendingChart').getContext('2d');
        new Chart(ctx, config);
    </script>

    <script>
        var categorySpendingData = {
            labels: @Html.Raw(Json.Serialize(Model.MonthlySpendingByCategory.Keys)),
            datasets: [{
                label: 'Spending by Category',
                data: @Html.Raw(Json.Serialize(Model.MonthlySpendingByCategory.Values)),
                backgroundColor: [
                    '#36A2EB',  // Blue
                    '#4BC0C0',  // Teal
                    '#9966FF',  // Purple
                    '#FFCE56',  // Yellow
                    '#2B9E9E',  // Turquoise
                    '#A78BFA',  // Light Purple
                    '#6366F1'
                ],
                hoverBackgroundColor: [
                    '#36A2EB',
                    '#4BC0C0',
                    '#9966FF',
                    '#FFCE56',
                    '#2B9E9E',
                    '#A78BFA',
                    '#6366F1'
                ]
            }]
        };

        var config = {
            type: 'pie',
            data: categorySpendingData,
            options: {
                responsive: true,
                maintainAspectRatio: true, // Disable the default aspect ratio maintenance
                aspectRatio: 1.55, // Adjust this value to control the height (lower value = taller)
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Monthly Spending by Category'
                    }
                }
            },
        };

        var ctx = document.getElementById('categorySpendingChart').getContext('2d');
        new Chart(ctx, config);
    </script>

    <script>
        var balanceGrowthChart;

        $(document).ready(function () {
            console.log("Initializing chart...");

            var ctx = document.getElementById('balanceGrowthChart').getContext('2d');
            balanceGrowthChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.DailyBalanceLabels)),
                    datasets: [{
                        label: 'Wallet Balance',
                        data: @Html.Raw(Json.Serialize(Model.DailyBalanceAmounts)),
                        backgroundColor: 'rgba(124, 58, 237, 0.2)',
                        borderColor: 'rgba(124, 58, 237, 1)',
                        borderWidth: 1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Wallet Balance Over Time'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });
        });

        function updateChart(interval) {
            console.log("Updating chart with interval:", interval);

            $.ajax({
                url: '@Url.Action("Index", "Dashboard")',
                type: 'GET',
                data: { interval: interval },
                success: function (result) {
                    console.log("AJAX call success, result:", result);

                    balanceGrowthChart.data.labels = result.balanceLabels;
                    balanceGrowthChart.data.datasets[0].data = result.balanceAmounts;
                    balanceGrowthChart.update();
                },
                error: function (xhr, status, error) {
                    console.error("AJAX call error:", error);
                }
            });
        }
    </script>

</body>

</html>
