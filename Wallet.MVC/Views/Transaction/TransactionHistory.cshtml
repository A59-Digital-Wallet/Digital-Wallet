@using Wallet.Data.Models.Enums
@model Wallet.MVC.Models.TransactionHistoryViewModel
@{
    Layout = "_Layout";
}
@{
    ViewData["Title"] = "Transaction History";
}

<!-- Ensure Tailwind CSS is included in your layout -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">

<div class="container mx-auto bg-white shadow-md rounded-lg p-6 max-w-4xl my-8">
    <h2 class="text-3xl font-bold text-gray-800 mb-5">Transaction History</h2>

    <!-- Toggle Button for Filters -->
    <button class="btn btn-primary mb-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" type="button" id="toggleFiltersButton">
        Show Filters
    </button>

    <!-- Filters Container (Initially Hidden) -->
    <div id="filtersContainer" class="mb-4" style="display: none;">
        <form method="get" asp-action="TransactionHistory">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- First Row of Filters -->
                <div>
                    <label for="Date" class="block font-semibold text-gray-700 mb-1">Specific Date</label>
                    <input type="date" id="Date" name="filter.Date" class="form-control p-2 rounded-lg border-gray-300 w-full" value="@Model.Filter.Date?.ToString("yyyy-MM-dd")" />
                </div>
                <div>
                    <label for="StartDate" class="block font-semibold text-gray-700 mb-1">Start Date</label>
                    <input type="date" id="StartDate" name="filter.StartDate" class="form-control p-2 rounded-lg border-gray-300 w-full" value="@Model.Filter.StartDate?.ToString("yyyy-MM-dd")" />
                </div>

                <!-- Second Row of Filters -->
                <div>
                    <label for="TransactionType" class="block font-semibold text-gray-700 mb-1">Transaction Type</label>
                    <select id="TransactionType" name="filter.TransactionType" class="form-control p-2 rounded-lg border-gray-300 w-full">
                        <option value="0" selected="@(Model.Filter.TransactionType == TransactionType.None ? "selected" : null)">All</option>
                        <option value="2" selected="@(Model.Filter.TransactionType == TransactionType.Deposit ? "selected" : null)">Deposit</option>
                        <option value="1" selected="@(Model.Filter.TransactionType == TransactionType.Withdraw ? "selected" : null)">Withdraw</option>
                        <option value="3" selected="@(Model.Filter.TransactionType == TransactionType.Transfer ? "selected" : null)">Transfer</option>
                    </select>
                </div>
                <div>
                    <label for="Currency" class="block font-semibold text-gray-700 mb-1">Currency</label>
                    <select id="Currency" name="filter.Currency" class="form-control p-2 rounded-lg border-gray-300 w-full">
                        <option value="0" selected="@(Model.Filter.Currency == Currency.None ? "selected" : null)">All</option>
                        @foreach (var currency in Enum.GetValues(typeof(Currency)))
                        {
                            <option value="@currency" selected="@(Model.Filter.Currency == (Currency)currency ? "selected" : null)">@currency</option>
                        }
                    </select>
                </div>

                <!-- Third Row of Filters -->
                <div>
                    <label for="Amount" class="block font-semibold text-gray-700 mb-1">Amount</label>
                    <input type="number" id="Amount" name="filter.Amount" class="form-control p-2 rounded-lg border-gray-300 w-full" value="@Model.Filter.Amount" />
                </div>
                <div>
                    <label for="WalletId" class="block font-semibold text-gray-700 mb-1">Wallet</label>
                    <select id="WalletId" name="filter.WalletId" class="form-control p-2 rounded-lg border-gray-300 w-full">
                        <option value="0" selected="@(Model.Filter.WalletId == 0 ? "selected" : null)">All</option>
                        @foreach (var wallet in Model.Wallets)
                        {
                            <option value="@wallet.Id" selected="@(Model.Filter.WalletId == wallet.Id ? "selected" : null)">@wallet.Name (@wallet.Currency)</option>
                        }
                    </select>
                </div>

                <!-- Fourth Row of Filters -->
                <div>
                    <label for="SortBy" class="block font-semibold text-gray-700 mb-1">Sort By</label>
                    <select id="SortBy" name="filter.SortBy" class="form-control p-2 rounded-lg border-gray-300 w-full">
                        <option value="Date" selected="@(Model.Filter.SortBy == "Date" ? "selected" : null)">Date</option>
                        <option value="Amount" selected="@(Model.Filter.SortBy == "Amount" ? "selected" : null)">Amount</option>
                        <option value="Status" selected="@(Model.Filter.SortBy == "Status" ? "selected" : null)">Status</option>
                    </select>
                </div>
                <div>
                    <label for="OrderBy" class="block font-semibold text-gray-700 mb-1">Order By</label>
                    <select id="OrderBy" name="filter.OrderBy" class="form-control p-2 rounded-lg border-gray-300 w-full">
                        <option value="asc" selected="@(Model.Filter.OrderBy == "asc" ? "selected" : null)">Ascending</option>
                        <option value="desc" selected="@(Model.Filter.OrderBy == "desc" ? "selected" : null)">Descending</option>
                    </select>
                </div>
            </div>
            <button type="submit" class="btn btn-primary mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Apply Filters</button>
        </form>
    </div>

    <!-- Transactions Display -->
    <div class="mt-8">
        @foreach (var monthlyGroup in Model.MonthlyTransactions)
        {
            <h3 class="text-xl font-bold text-gray-700 mt-4">@monthlyGroup.MonthYear</h3>
            <table class="table-auto w-full mt-2 border border-gray-200 rounded-lg">
                <thead>
                    <tr class="bg-gray-100 text-left">
                        <th class="p-2 text-sm font-semibold text-gray-700 border-b">Date</th>
                        <th class="p-2 text-sm font-semibold text-gray-700 border-b">Description</th>
                        <th class="p-2 text-sm font-semibold text-gray-700 border-b">Amount</th>
                        <th class="p-2 text-sm font-semibold text-gray-700 border-b">Type</th>
                        <th class="p-2 text-sm font-semibold text-gray-700 border-b">Direction</th>
                        <th class="p-2 text-sm font-semibold text-gray-700 border-b">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in monthlyGroup.Transactions)
                    {
                        <tr class="border-b last:border-none">
                            <td class="p-2 text-sm text-gray-800">@transaction.Date.ToString("dd/MM/yyyy")</td>
                            <td class="p-2 text-sm text-gray-800">
                                <div>@transaction.Description</div>
                                @if (!string.IsNullOrEmpty(transaction.FromWallet) || !string.IsNullOrEmpty(transaction.ToWallet))
                                {
                                    <div class="text-xs text-gray-500 mt-1">
                                        @if (!string.IsNullOrEmpty(transaction.FromWallet))
                                        {
                                            <span>From: <strong>@transaction.FromWallet</strong></span>
                                        }
                                        @if (!string.IsNullOrEmpty(transaction.ToWallet))
                                        {
                                            @if (!string.IsNullOrEmpty(transaction.FromWallet))
                                            {
                                                <span> &rarr; </span> <!-- Arrow to indicate direction -->
                                            }
                                            <span>To: <strong>@transaction.ToWallet</strong></span>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="p-2 text-sm text-gray-800">
                                @transaction.OriginalAmount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(transaction.CurrencyCulture)) @transaction.OriginalCurrency
                                @if (transaction.OriginalCurrency != transaction.SentCurrency)
                                {
                                    <div class="text-xs text-gray-500">
                                        (Converted: @transaction.Amount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo(transaction.CurrencyCultureSent)))
                                    </div>
                                }
                            </td>
                            <td class="p-2 text-sm text-gray-800">@transaction.Type</td>
                            <td class="p-2 text-sm font-medium @(transaction.Direction == "Incoming" ? "text-green-500" : "text-red-500")">
                                @transaction.Direction
                            </td>
                            <td class="p-2 text-sm text-gray-800">
                                @if (transaction.IsRecurring)
                                {
                                    <form asp-action="CancelRecurringTransaction" method="post" onsubmit="return confirm('Are you sure you want to cancel this recurring transaction?');">
                                        <input type="hidden" name="transactionId" value="@transaction.Id" />
                                        <button type="submit" class="bg-red-500 text-white px-4 py-1 rounded text-sm hover:bg-red-600">Cancel Recurring</button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <!-- Pagination -->
    <div class="pagination mt-6">
        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Page navigation example">
                <ul class="inline-flex items-center -space-x-px">
                    @if (Model.CurrentPage > 1)
                    {
                        <li>
                            <a class="px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700" href="@Url.Action("TransactionHistory", new {
                            page = Model.CurrentPage - 1,
                            pageSize = Model.PageSize,
                            Date = Model.Filter.Date,
                            StartDate = Model.Filter.StartDate,
                            EndDate = Model.Filter.EndDate,
                            TransactionType = Model.Filter.TransactionType,
                            Currency = Model.Filter.Currency,
                            WalletId = Model.Filter.WalletId,
                            SortBy = Model.Filter.SortBy,
                            OrderBy = Model.Filter.OrderBy
                        })">Previous</a>
                        </li>
                    }

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li>
                            <a class="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 @(i == Model.CurrentPage ? "bg-blue-500 text-white" : "")" href="@Url.Action("TransactionHistory", new {
                            page = i,
                            pageSize = Model.PageSize,
                            Date = Model.Filter.Date,
                            StartDate = Model.Filter.StartDate,
                            EndDate = Model.Filter.EndDate,
                            TransactionType = Model.Filter.TransactionType,
                            Currency = Model.Filter.Currency,
                            WalletId = Model.Filter.WalletId,
                            SortBy = Model.Filter.SortBy,
                            OrderBy = Model.Filter.OrderBy
                        })">@i</a>
                        </li>
                    }

                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li>
                            <a class="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700" href="@Url.Action("TransactionHistory", new {
                            page = Model.CurrentPage + 1,
                            pageSize = Model.PageSize,
                            Date = Model.Filter.Date,
                            StartDate = Model.Filter.StartDate,
                            EndDate = Model.Filter.EndDate,
                            TransactionType = Model.Filter.TransactionType,
                            Currency = Model.Filter.Currency,
                            WalletId = Model.Filter.WalletId,
                            SortBy = Model.Filter.SortBy,
                            OrderBy = Model.Filter.OrderBy
                        })">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    </div>
</div>

<script>
    document.getElementById('toggleFiltersButton').addEventListener('click', function () {
        var filtersContainer = document.getElementById('filtersContainer');
        if (filtersContainer.style.display === 'none') {
            filtersContainer.style.display = 'block';
            this.textContent = 'Hide Filters';
        } else {
            filtersContainer.style.display = 'none';
            this.textContent = 'Show Filters';
        }
    });
</script>
